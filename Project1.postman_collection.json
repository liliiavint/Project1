{
	"info": {
		"_postman_id": "0294d2d9-757c-43c9-bdaa-952b5e12c4d4",
		"name": "Project-movie-store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34520114"
	},
	"item": [
		{
			"name": "Create and delete movie",
			"item": [
				{
					"name": "create movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"movieId\", responseData.id);",
									"pm.collectionVariables.set(\"title\", requestData.title);",
									"pm.collectionVariables.set(\"productionDate\", requestData.productionDate);",
									"pm.collectionVariables.set(\"producer\", requestData.producer);",
									"pm.collectionVariables.set(\"rating\", requestData.rating);",
									"",
									"pm.test(\"Status code is 201\", () => { ",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains new movie\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\", jsonData.id);",
									"});",
									"",
									"pm.test(\"New movie data is correct\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Forrest Gump\");",
									"    pm.expect(jsonData.productionDate).to.eql(\"1994\");",
									"    pm.expect(jsonData.producer).to.eql(\"Robert Zemeckis\");",
									"    pm.expect(jsonData.rating).to.eql(\"8.8\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Forrest Gump\",\r\n    \"productionDate\": \"1994\", \r\n    \"producer\": \"Robert Zemeckis\",\r\n    \"rating\": \"8.8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basic-url}}movies/item/",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"item",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the correct movie ID\", () =>{",
									"    let jsonData = pm.response.json();",
									"    let movieId = pm.collectionVariables.get(\"movieId\");",
									"    pm.expect(jsonData[0].id).to.eql(movieId);",
									"});",
									"",
									"pm.test(\"Response body not empty\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('Array').that.is.not.empty;",
									"});",
									"",
									"pm.test(\"Response body includes properties: title, productionDate, producer and rating\", () => {",
									"const jsonData = pm.response.json();",
									"pm.expect(jsonData[0]).to.have.property('title');",
									"pm.expect(jsonData[0]).to.have.property('productionDate');",
									"pm.expect(jsonData[0]).to.have.property('producer');",
									"pm.expect(jsonData[0]).to.have.property('rating');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies/{{movieId}}",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the required fields for movies\", () => {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('Object').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"No empty fields in movies response\", function () {\r",
									"    const responseData = pm.response.json().movies;\r",
									"    responseData.forEach(function (movie) {\r",
									"        pm.expect(movie.id).to.not.be.null;\r",
									"        pm.expect(movie.id).to.not.be.undefined;\r",
									"        pm.expect(movie.title).to.not.be.empty;\r",
									"        pm.expect(movie.productionDate).to.not.be.null;\r",
									"        pm.expect(movie.productionDate).to.not.be.undefined;\r",
									"        pm.expect(movie.producer).to.not.be.empty;\r",
									"        pm.expect(movie.rating).to.not.be.null;\r",
									"        pm.expect(movie.rating).to.not.be.undefined;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not have unexpected properties\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) {\r",
									"        const allowedKeys = [\"id\", \"title\", \"productionDate\", \"producer\", \"rating\"];\r",
									"        jsonData.forEach(movie => {\r",
									"            const responseKeys = Object.keys(movie);\r",
									"            responseKeys.forEach(key => {\r",
									"                pm.expect(allowedKeys).to.include(key);\r",
									"            });\r",
									"        });\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies",
							"host": [
								"{{basic-url}}movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\",  () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies/{{movieId}}",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movie without the deleting movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body doesn't have the deleted movie ID\", ()=> {",
									"    const responseData = pm.response.json().movies;",
									"    responseData.forEach((movie) => {",
									"        pm.expect(movie.id).to.not.equal(pm.collectionVariables.get('movieId'));",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies/",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and change movie",
			"item": [
				{
					"name": "create movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const requestData = JSON.parse(pm.request.body.raw);",
									"",
									"pm.collectionVariables.set(\"movieId\", responseData.id);",
									"pm.collectionVariables.set(\"title\", requestData.title);",
									"pm.collectionVariables.set(\"productionDate\", requestData.productionDate);",
									"pm.collectionVariables.set(\"producer\", requestData.producer);",
									"pm.collectionVariables.set(\"rating\", requestData.rating);",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains new movie\", () => {",
									"    const data = pm.response.json();",
									"    pm.expect(data).to.have.property(\"id\", responseData.id);",
									"});",
									"",
									"pm.test(\"New movie data is correct\", () =>{",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.title).to.eql(\"Forrest Gump\");",
									"    pm.expect(jsonData.productionDate).to.eql(\"1994\");",
									"    pm.expect(jsonData.producer).to.eql(\"Robert Zemeckis\");",
									"    pm.expect(jsonData.rating).to.eql(\"8.8\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Forrest Gump\",\r\n    \"productionDate\": \"1994\", \r\n    \"producer\": \"Robert Zemeckis\",\r\n    \"rating\": \"8.8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basic-url}}movies/item/",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"item",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "change rating movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"rating\", jsonData.rating);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Movie data is present\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is updated correctly\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.rating).to.eql('10');\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\": \"10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basic-url}}movies/{{movieId}}",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the correct movie ID\", ()=> {",
									"   let jsonData = pm.response.json();",
									"        let movieId = pm.collectionVariables.get(\"movieId\");",
									"        pm.expect(jsonData[0].id).to.eql(movieId);",
									"});",
									"",
									"pm.test(\"Movie rating was successfully updated\", () => {",
									"    const responseData = pm.response.json();",
									"    const newRating = pm.collectionVariables.get('rating');",
									"",
									"    pm.expect(responseData[0].rating).to.eql(newRating);",
									"});\t\t\t\t\t",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies/{{movieId}}",
							"host": [
								"{{basic-url}}movies"
							],
							"path": [
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all movie with the changing rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed JSON parsing error\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains the required fields for movies\", ()=> {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"movies\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is updated\", function () {\r",
									"    const updatedMovie = pm.response.json().movies[0];\r",
									"    pm.expect(updatedMovie.rating).to.eql(\"10\");\r",
									"});\r",
									"\r",
									"const movies = pm.collectionVariables.has(\"movies\") ? JSON.parse(pm.collectionVariables.get(\"movies\")) : [];\r",
									"let hasUpdatedRating = false;\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"movies.forEach(movie => {\r",
									"    if (movie.id === responseData.id && movie.rating === \"10\") {\r",
									"        hasUpdatedRating = true;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basic-url}}movies",
							"host": [
								"{{basic-url}}movies"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "basic-url",
			"value": "http://localhost:3002/",
			"type": "string"
		},
		{
			"key": "movieId",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "productionDate",
			"value": ""
		},
		{
			"key": "producer",
			"value": ""
		},
		{
			"key": "rating",
			"value": ""
		}
	]
}